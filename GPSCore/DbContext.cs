// Licence file C:\Users\iagop\Documents\ReversePOCO.txt not found.
// Please obtain your licence file at www.ReversePOCO.co.uk, and place it in your documents folder shown above.
// Defaulting to Trial version.
// <auto-generated>
// ReSharper disable All

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Infrastructure.Annotations;
using System.Data.Entity.Infrastructure.Interception;
using System.Data.Entity.ModelConfiguration;
using System.Data.Entity.Spatial;
using System.Data.Entity.Validation;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace GPSCore
{
    #region Database context interface

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public interface IMyDbContext : IDisposable
    {
        DbSet<GpsTblContatoEmpresa> GpsTblContatoEmpresas { get; set; } // gps_tbl_contato_empresa
        DbSet<GpsTblEmpresa> GpsTblEmpresas { get; set; } // gps_tbl_empresa
        DbSet<GpsTblEndereco> GpsTblEnderecoes { get; set; } // gps_tbl_endereco

        int SaveChanges();
        Task<int> SaveChangesAsync();
        Task<int> SaveChangesAsync(CancellationToken cancellationToken);
        DbChangeTracker ChangeTracker { get; }
        DbContextConfiguration Configuration { get; }
        Database Database { get; }
        DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        DbEntityEntry Entry(object entity);
        IEnumerable<DbEntityValidationResult> GetValidationErrors();
        DbSet Set(Type entityType);
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class MyDbContext : DbContext, IMyDbContext
    {
        public DbSet<GpsTblContatoEmpresa> GpsTblContatoEmpresas { get; set; } // gps_tbl_contato_empresa
        public DbSet<GpsTblEmpresa> GpsTblEmpresas { get; set; } // gps_tbl_empresa
        public DbSet<GpsTblEndereco> GpsTblEnderecoes { get; set; } // gps_tbl_endereco

        static MyDbContext()
        {
            System.Data.Entity.Database.SetInitializer<MyDbContext>(null);
        }

        /// <inheritdoc />
        public MyDbContext()
            : base("Name=MyDbContext")
        {
        }

        /// <inheritdoc />
        public MyDbContext(string connectionString)
            : base(connectionString)
        {
        }

        /// <inheritdoc />
        public MyDbContext(string connectionString, DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        /// <inheritdoc />
        public MyDbContext(DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        /// <inheritdoc />
        public MyDbContext(DbConnection existingConnection, DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        /// <inheritdoc />
        public MyDbContext(ObjectContext objectContext, bool dbContextOwnsObjectContext)
            : base(objectContext, dbContextOwnsObjectContext)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new GpsTblContatoEmpresaConfiguration());
            modelBuilder.Configurations.Add(new GpsTblEmpresaConfiguration());
            modelBuilder.Configurations.Add(new GpsTblEnderecoConfiguration());
        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new GpsTblContatoEmpresaConfiguration(schema));
            modelBuilder.Configurations.Add(new GpsTblEmpresaConfiguration(schema));
            modelBuilder.Configurations.Add(new GpsTblEnderecoConfiguration(schema));

            return modelBuilder;
        }
    }

    #endregion

    #region Database context factory

    public class MyDbContextFactory : IDbContextFactory<MyDbContext>
    {
        public MyDbContext Create()
        {
            return new MyDbContext();
        }
    }

    #endregion

    #region Fake Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class FakeMyDbContext : IMyDbContext
    {
        public DbSet<GpsTblContatoEmpresa> GpsTblContatoEmpresas { get; set; } // gps_tbl_contato_empresa
        public DbSet<GpsTblEmpresa> GpsTblEmpresas { get; set; } // gps_tbl_empresa
        public DbSet<GpsTblEndereco> GpsTblEnderecoes { get; set; } // gps_tbl_endereco

        public FakeMyDbContext()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            GpsTblContatoEmpresas = new FakeDbSet<GpsTblContatoEmpresa>("Id");
            GpsTblEmpresas = new FakeDbSet<GpsTblEmpresa>("Id");
            GpsTblEnderecoes = new FakeDbSet<GpsTblEndereco>("Id");

        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1);
        }

        public Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DbChangeTracker _changeTracker;

        public DbChangeTracker ChangeTracker { get { return _changeTracker; } }

        private DbContextConfiguration _configuration;

        public DbContextConfiguration Configuration { get { return _configuration; } }

        private Database _database;

        public Database Database { get { return _database; } }

        public DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public DbEntityEntry Entry(object entity)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<DbEntityValidationResult> GetValidationErrors()
        {
            throw new NotImplementedException();
        }

        public DbSet Set(Type entityType)
        {
            throw new NotImplementedException();
        }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }
    }

    #endregion

    #region Fake DbSet

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable, IEnumerable<TEntity>, IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly PropertyInfo[] _primaryKeys;
        private readonly ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override Task<TEntity> FindAsync(CancellationToken cancellationToken, params object[] keyValues)
        {
            return Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override Task<TEntity> FindAsync(params object[] keyValues)
        {
            return Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override IEnumerable<TEntity> AddRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override IEnumerable<TEntity> RemoveRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return Activator.CreateInstance<TDerivedEntity>();
        }

        public override ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IDbAsyncEnumerator<TEntity> IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    public class FakeDbAsyncQueryProvider<TEntity> : IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(Expression expression)
        {
            var m = expression as MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it should be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>) Activator.CreateInstance(queryType, expression);
        }

        public object Execute(Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public Task<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken)
        {
            return Task.FromResult(Execute(expression));
        }

        public Task<TResult> ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken)
        {
            return Task.FromResult(Execute<TResult>(expression));
        }
    }

    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(Expression expression)
            : base(expression)
        { }

        public IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        IDbAsyncEnumerator IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }

    }

    public class FakeDbAsyncEnumerator<T> : IDbAsyncEnumerator<T>
    {
        private readonly IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public Task<bool> MoveNextAsync(CancellationToken cancellationToken)
        {
            return Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // gps_tbl_contato_empresa
    public class GpsTblContatoEmpresa
    {
        public int Id { get; set; } // Id (Primary key)
        public string Telefone { get; set; } // Telefone (length: 25)
        public string Telefone2 { get; set; } // Telefone2 (length: 25)
        public string Email { get; set; } // Email (length: 120)
        public int? IdEmpresa { get; set; } // IdEmpresa

        // Foreign keys

        /// <summary>
        /// Parent GpsTblEmpresa pointed by [gps_tbl_contato_empresa].([IdEmpresa]) (FK__gps_tbl_c__IdEmp__29572725)
        /// </summary>
        public virtual GpsTblEmpresa GpsTblEmpresa { get; set; } // FK__gps_tbl_c__IdEmp__29572725
    }

    // gps_tbl_empresa
    public class GpsTblEmpresa
    {
        public int Id { get; set; } // Id (Primary key)
        public string Nome { get; set; } // Nome (length: 250)
        public string Cnpj { get; set; } // Cnpj (length: 14)
        public decimal? TipoEmpresa { get; set; } // TipoEmpresa
        public string CapitalSocial { get; set; } // CapitalSocial (length: 30)
        public string Procura { get; set; } // Procura (length: 20)
        public string Socios { get; set; } // Socios (length: 10)
        public DateTime DataAbertura { get; set; } // DataAbertura

        // Reverse navigation

        /// <summary>
        /// Child GpsTblContatoEmpresas where [gps_tbl_contato_empresa].[IdEmpresa] point to this entity (FK__gps_tbl_c__IdEmp__29572725)
        /// </summary>
        public virtual ICollection<GpsTblContatoEmpresa> GpsTblContatoEmpresas { get; set; } // gps_tbl_contato_empresa.FK__gps_tbl_c__IdEmp__29572725

        /// <summary>
        /// Child GpsTblEnderecoes where [gps_tbl_endereco].[IdEmpresa] point to this entity (FK__gps_tbl_e__IdEmp__267ABA7A)
        /// </summary>
        public virtual ICollection<GpsTblEndereco> GpsTblEnderecoes { get; set; } // gps_tbl_endereco.FK__gps_tbl_e__IdEmp__267ABA7A

        public GpsTblEmpresa()
        {
            GpsTblContatoEmpresas = new List<GpsTblContatoEmpresa>();
            GpsTblEnderecoes = new List<GpsTblEndereco>();
        }
    }

    // gps_tbl_endereco
    public class GpsTblEndereco
    {
        public int Id { get; set; } // Id (Primary key)
        public string Endereco { get; set; } // Endereco (length: 250)
        public string Numero { get; set; } // Numero (length: 15)
        public string Cep { get; set; } // Cep (length: 5)
        public string Bairro { get; set; } // Bairro (length: 50)
        public string Uf { get; set; } // Uf (length: 2)
        public int? IdEmpresa { get; set; } // IdEmpresa

        // Foreign keys

        /// <summary>
        /// Parent GpsTblEmpresa pointed by [gps_tbl_endereco].([IdEmpresa]) (FK__gps_tbl_e__IdEmp__267ABA7A)
        /// </summary>
        public virtual GpsTblEmpresa GpsTblEmpresa { get; set; } // FK__gps_tbl_e__IdEmp__267ABA7A
    }


    #endregion

    #region POCO Configuration

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // gps_tbl_contato_empresa
    public class GpsTblContatoEmpresaConfiguration : EntityTypeConfiguration<GpsTblContatoEmpresa>
    {
        public GpsTblContatoEmpresaConfiguration()
            : this("dbo")
        {
        }

        public GpsTblContatoEmpresaConfiguration(string schema)
        {
            ToTable("gps_tbl_contato_empresa", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Telefone).HasColumnName(@"Telefone").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(25);
            Property(x => x.Telefone2).HasColumnName(@"Telefone2").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(25);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(120);
            Property(x => x.IdEmpresa).HasColumnName(@"IdEmpresa").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.GpsTblEmpresa).WithMany(b => b.GpsTblContatoEmpresas).HasForeignKey(c => c.IdEmpresa).WillCascadeOnDelete(false); // FK__gps_tbl_c__IdEmp__29572725
        }
    }

    // gps_tbl_empresa
    public class GpsTblEmpresaConfiguration : EntityTypeConfiguration<GpsTblEmpresa>
    {
        public GpsTblEmpresaConfiguration()
            : this("dbo")
        {
        }

        public GpsTblEmpresaConfiguration(string schema)
        {
            ToTable("gps_tbl_empresa", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Nome).HasColumnName(@"Nome").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250);
            Property(x => x.Cnpj).HasColumnName(@"Cnpj").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(14);
            Property(x => x.TipoEmpresa).HasColumnName(@"TipoEmpresa").HasColumnType("numeric").IsOptional().HasPrecision(1,0);
            Property(x => x.CapitalSocial).HasColumnName(@"CapitalSocial").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(30);
            Property(x => x.Procura).HasColumnName(@"Procura").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.Socios).HasColumnName(@"Socios").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.DataAbertura).HasColumnName(@"DataAbertura").HasColumnType("date").IsRequired();
        }
    }

    // gps_tbl_endereco
    public class GpsTblEnderecoConfiguration : EntityTypeConfiguration<GpsTblEndereco>
    {
        public GpsTblEnderecoConfiguration()
            : this("dbo")
        {
        }

        public GpsTblEnderecoConfiguration(string schema)
        {
            ToTable("gps_tbl_endereco", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Endereco).HasColumnName(@"Endereco").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250);
            Property(x => x.Numero).HasColumnName(@"Numero").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(15);
            Property(x => x.Cep).HasColumnName(@"Cep").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5);
            Property(x => x.Bairro).HasColumnName(@"Bairro").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Uf).HasColumnName(@"Uf").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(2);
            Property(x => x.IdEmpresa).HasColumnName(@"IdEmpresa").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.GpsTblEmpresa).WithMany(b => b.GpsTblEnderecoes).HasForeignKey(c => c.IdEmpresa).WillCascadeOnDelete(false); // FK__gps_tbl_e__IdEmp__267ABA7A
        }
    }


    #endregion

}
// </auto-generated>
